diff --git a/../../web/viewer.mjs b/../viewer/viewer.mjs
index c3d794a27..085275c56 100644
--- a/../../web/viewer.mjs
+++ b/../viewer/viewer.mjs
@@ -758,7 +758,7 @@ const defaultOptions = {
     kind: OptionKind.API
   },
   cMapUrl: {
-    value: "../web/cmaps/",
+    value: "../cmaps/",
     kind: OptionKind.API
   },
   disableAutoFetch: {
@@ -810,7 +810,7 @@ const defaultOptions = {
     kind: OptionKind.API
   },
   standardFontDataUrl: {
-    value: "../web/standard_fonts/",
+    value: "../standard_fonts/",
     kind: OptionKind.API
   },
   useSystemFonts: {
@@ -827,7 +827,7 @@ const defaultOptions = {
     kind: OptionKind.WORKER
   },
   workerSrc: {
-    value: "../build/pdf.worker.mjs",
+    value: "./build/pdf.worker.mjs",
     kind: OptionKind.WORKER
   }
 };
@@ -837,7 +837,7 @@ const defaultOptions = {
     kind: OptionKind.VIEWER
   };
   defaultOptions.sandboxBundleSrc = {
-    value: "../build/pdf.sandbox.mjs",
+    value: "./build/pdf.sandbox.mjs",
     kind: OptionKind.VIEWER
   };
   defaultOptions.viewerCssTheme = {
@@ -2616,7 +2616,7 @@ class Localization {
       if (typeof console !== "undefined") {
         const locale = bundle.locales[0];
         const ids = Array.from(missingIds).join(", ");
-        console.warn(`[fluent] Missing translations in ${locale}: ${ids}`);
+        // console.warn(`[fluent] Missing translations in ${locale}: ${ids}`);
       }
     }
     if (!hasAtLeastOneBundle && typeof console !== "undefined") {
@@ -3099,11 +3099,11 @@ class GenericScripting {
 function initCom(app) {}
 class Preferences extends BasePreferences {
   async _writeToStorage(prefObj) {
-    localStorage.setItem("pdfjs.preferences", JSON.stringify(prefObj));
+    // localStorage.setItem("pdfjs.preferences", JSON.stringify(prefObj));
   }
   async _readFromStorage(prefObj) {
     return {
-      prefs: JSON.parse(localStorage.getItem("pdfjs.preferences"))
+      prefs: undefined // JSON.parse(localStorage.getItem("pdfjs.preferences"))
     };
   }
 }
@@ -5273,7 +5273,7 @@ const FindState = {
   PENDING: 3
 };
 const FIND_TIMEOUT = 250;
-const MATCH_SCROLL_OFFSET_TOP = -50;
+const MATCH_SCROLL_OFFSET_TOP = -100;
 const MATCH_SCROLL_OFFSET_LEFT = -400;
 const CHARACTERS_TO_NORMALIZE = {
   "\u2010": "-",
@@ -7681,6 +7681,9 @@ function renderProgress(index, total) {
 }
 window.addEventListener("keydown", function (event) {
   if (event.keyCode === 80 && (event.ctrlKey || event.metaKey) && !event.altKey && (!event.shiftKey || window.chrome || window.opera)) {
+    if (window.parent !== window) {
+      return;
+    }
     window.print();
     event.preventDefault();
     event.stopImmediatePropagation();
@@ -8265,7 +8268,7 @@ class PDFSidebar {
       this.#dispatchEvent();
       return;
     }
-    this.switchView(view, true);
+    this.switchView(view, false);
     if (!this.isInitialEventDispatched) {
       this.#dispatchEvent();
     }
@@ -10995,7 +10998,7 @@ class PDFViewer {
     this.#enableNewAltTextWhenAddingImage = options.enableNewAltTextWhenAddingImage === true;
     this.imageResourcesPath = options.imageResourcesPath || "";
     this.enablePrintAutoRotate = options.enablePrintAutoRotate || false;
-    this.removePageBorders = options.removePageBorders || false;
+    this.removePageBorders = options.removePageBorders || true;
     this.maxCanvasPixels = options.maxCanvasPixels;
     this.l10n = options.l10n;
     this.l10n ||= new genericl10n_GenericL10n();
@@ -11732,12 +11735,12 @@ class PDFViewer {
           hPadding *= 2;
         }
       } else if (this.removePageBorders) {
-        hPadding = vPadding = 0;
+        if (this._scrollMode === ScrollMode.HORIZONTAL || this._spreadMode === SpreadMode.NONE) { hPadding = vPadding = 0; } else { hPadding = 10; vPadding = 0; }
       } else if (this._scrollMode === ScrollMode.HORIZONTAL) {
         [hPadding, vPadding] = [vPadding, hPadding];
       }
-      const pageWidthScale = (this.container.clientWidth - hPadding) / currentPage.width * currentPage.scale / this.#pageWidthScaleFactor;
-      const pageHeightScale = (this.container.clientHeight - vPadding) / currentPage.height * currentPage.scale;
+      const pageWidthScale = (this.container.clientWidth - hPadding) / Math.max(...this._pages.map(p => p.width)) * currentPage.scale / this.#pageWidthScaleFactor * (1 / (1 - (viewerTrim ?? 0) / 100));
+      const pageHeightScale = (this.container.clientHeight - vPadding) / Math.max(...this._pages.map(p => p.height)) * currentPage.scale * (1 / (1 - (viewerTrim ?? 0) / 100));
       switch (value) {
         case "page-actual":
           scale = 1;
@@ -11848,7 +11851,7 @@ class PDFViewer {
         let hPadding = SCROLLBAR_PADDING,
           vPadding = VERTICAL_PADDING;
         if (this.removePageBorders) {
-          hPadding = vPadding = 0;
+          if (this._scrollMode === ScrollMode.HORIZONTAL || this._spreadMode === SpreadMode.NONE) { hPadding = vPadding = 0; } else { hPadding = 10; vPadding = 0; }
         }
         widthScale = (this.container.clientWidth - hPadding) / width / PixelsPerInch.PDF_TO_CSS_UNITS;
         heightScale = (this.container.clientHeight - vPadding) / height / PixelsPerInch.PDF_TO_CSS_UNITS;
@@ -13088,10 +13091,10 @@ class ViewHistory {
   }
   async _writeToStorage() {
     const databaseStr = JSON.stringify(this.database);
-    localStorage.setItem("pdfjs.history", databaseStr);
+    // localStorage.setItem("pdfjs.history", databaseStr);
   }
   async _readFromStorage() {
-    return localStorage.getItem("pdfjs.history");
+    return // localStorage.getItem("pdfjs.history");
   }
   async set(name, val) {
     await this._initializedPromise;
@@ -13694,7 +13697,7 @@ const PDFViewerApplication = {
         title = decodeURIComponent(getFilenameFromUrl(url));
       } catch {}
     }
-    this.setTitle(title || url);
+    // this.setTitle(title || url);
   },
   setTitle(title = this._title) {
     this._title = title;
@@ -14118,7 +14121,7 @@ const PDFViewerApplication = {
     this.metadata = metadata;
     this._contentDispositionFilename ??= contentDispositionFilename;
     this._contentLength ??= contentLength;
-    console.log(`PDF ${pdfDocument.fingerprints[0]} [${info.PDFFormatVersion} ` + `${(info.Producer || "-").trim()} / ${(info.Creator || "-").trim()}] ` + `(PDF.js: ${version || "?"} [${build || "?"}])`);
+    // console.log(`PDF ${pdfDocument.fingerprints[0]} [${info.PDFFormatVersion} ` + `${(info.Producer || "-").trim()} / ${(info.Creator || "-").trim()}] ` + `(PDF.js: ${version || "?"} [${build || "?"}])`);
     let pdfTitle = info.Title;
     const metadataTitle = metadata?.get("dc:title");
     if (metadataTitle) {
@@ -14249,9 +14252,9 @@ const PDFViewerApplication = {
     this.pdfSidebar?.setInitialView(sidebarView);
     setViewerModes(scrollMode, spreadMode);
     if (this.initialBookmark) {
-      setRotation(this.initialRotation);
+      // setRotation(this.initialRotation);
       delete this.initialRotation;
-      this.pdfLinkService.setHash(this.initialBookmark);
+      // this.pdfLinkService.setHash(this.initialBookmark);
       this.initialBookmark = null;
     } else if (storedHash) {
       setRotation(rotation);
@@ -14368,8 +14371,8 @@ const PDFViewerApplication = {
     eventBus._on("presentationmodechanged", evt => pdfViewer.presentationModeState = evt.state, opts);
     eventBus._on("presentationmode", this.requestPresentationMode.bind(this), opts);
     eventBus._on("switchannotationeditormode", evt => pdfViewer.annotationEditorMode = evt, opts);
-    eventBus._on("print", this.triggerPrinting.bind(this), opts);
-    eventBus._on("download", this.downloadOrSave.bind(this), opts);
+    // eventBus._on("print", this.triggerPrinting.bind(this), opts);
+    // eventBus._on("download", this.downloadOrSave.bind(this), opts);
     eventBus._on("firstpage", () => this.page = 1, opts);
     eventBus._on("lastpage", () => this.page = this.pagesCount, opts);
     eventBus._on("nextpage", () => pdfViewer.nextPage(), opts);
@@ -14392,7 +14395,7 @@ const PDFViewerApplication = {
     eventBus._on("updatefindmatchescount", onUpdateFindMatchesCount.bind(this), opts);
     eventBus._on("updatefindcontrolstate", onUpdateFindControlState.bind(this), opts);
     eventBus._on("fileinputchange", onFileInputChange.bind(this), opts);
-    eventBus._on("openfile", onOpenFile.bind(this), opts);
+    // eventBus._on("openfile", onOpenFile.bind(this), opts);
   },
   bindWindowEvents() {
     if (this._windowAbortController) {
@@ -15345,7 +15348,7 @@ function webViewerLoad() {
   try {
     parent.document.dispatchEvent(event);
   } catch (ex) {
-    console.error("webviewerloaded:", ex);
+    // console.error("webviewerloaded:", ex);
     document.dispatchEvent(event);
   }
   PDFViewerApplication.run(config);
@@ -15362,4 +15365,3 @@ var __webpack_exports__PDFViewerApplicationConstants = __webpack_exports__.PDFVi
 var __webpack_exports__PDFViewerApplicationOptions = __webpack_exports__.PDFViewerApplicationOptions;
 export { __webpack_exports__PDFViewerApplication as PDFViewerApplication, __webpack_exports__PDFViewerApplicationConstants as PDFViewerApplicationConstants, __webpack_exports__PDFViewerApplicationOptions as PDFViewerApplicationOptions };
 
-//# sourceMappingURL=viewer.mjs.map
\ No newline at end of file
